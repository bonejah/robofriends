{"version":3,"sources":["constants.js","reducer.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","CardList","roboComponent","map","robot","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLocaleLowerCase","includes","connect","requestRobots","searchRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","isPendin","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e9ddadd.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPendin: false });\n    default:\n      return state;\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return(\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n      <div>\n        <img alt='robots' src={`https://robohash.org/${id}?200X200`} />\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>  \n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  const roboComponent = robots.map((robot, i) => {\n    // return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n    return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email}/>\n  });\n\n  return (\n    <div>\n      {roboComponent}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search robots' \n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return(\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n  \n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Ooops. That is not good!</h1>\n    }\n\n    return this.props.children;\n  }\n\n}\n\nexport default ErrorBoundry;","// import React, { useState, useEffect } from 'react';''\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry';\n\nimport './App.css'\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n    searchField: state.searchRobots.searchField\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  } \n}\n\nclass App extends Component {\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     robots: [],\n  //     searchField: ''\n  //   }\n  // }\n\n  // componentDidMount() {\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //     .then(response => response.json())\n  //     .then(users => this.setState({ robots: users }))\n  //     .catch(error => console.log('error', error));\n  // }\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  // onSearchChange = (event) => {\n  //   this.setState({ searchField: event.target.value })\n  // }\n\n  render() {\n    // const { robots, searchField } = this.state;\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n    })\n\n    return isPending ?\n      <div>Loading...</div> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>Robo Friends</h1>\n          {/* <SearchBox searchChange={this.onSearchChange} /> */}\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// Example using Hooks\n// function App() {\n//   const [robots, setRobots] = useState([]);\n//   const [searchField, setSearchField] = useState('');\n\n//   useEffect(() => {\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//       .then(response => response.json())\n//       .then(users => setRobots(users))\n//       .catch(error => console.log('error', error));\n//   }, [])\n\n//   const onSearchChange = (event) => {\n//     setSearchField(event.target.value)\n//   }\n\n//   const filteredRobots = robots.filter(robot => {\n//     return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n//   });\n\n//   console.log('robots', robots)\n\n//   return !robots.length ?\n//     <div>Loading...</div> :\n//     (\n//       <div className='tc'>\n//         <h1 className='f1'>Robo Friends</h1>\n//         <SearchBox searchChange={onSearchChange} />\n//         <Scroll>\n//           <ErrorBoundry>\n//             <CardList robots={filteredRobots} />\n//           </ErrorBoundry>\n//         </Scroll>\n//       </div>\n//     );\n// }\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { searchRobots, requestRobots } from './reducer';\n\nimport App from './containers/App';\n\nimport './index.css';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}